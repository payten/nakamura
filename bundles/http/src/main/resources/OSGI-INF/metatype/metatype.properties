#
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
#  specific language governing permissions and limitations
#  under the License.
#
org.sakaiproject.nakamura.http.i18n.I18nFilter.name = Sakai Nakamura :: \
 Internationalization (i18n) Filter
org.sakaiproject.nakamura.http.i18n.I18nFilter.description = Servlet filter to transform \
 message keys in static files into i18n messages before getting to the client.
sakai.filter.i18n.pattern.name = Resource Filter Pattern
sakai.filter.i18n.pattern.description = Pattern of resources to filter the content of. 
sakai.filter.i18n.bundles.path.name = Bundles Path
sakai.filter.i18n.bundles.path.description = Path in JCR to start at when looking for \
 language bundles.
sakai.filter.i18n.message_key.pattern.name = Message Key Pattern
sakai.filter.i18n.message_key.pattern.description = Pattern used to look for message keys.
sakai.filter.i18n.message_key.show_missing.name = Show missing keys message?
sakai.filter.i18n.message_key.show_missing.description = Whether to show a missing key \
 message in the output (true) or to leave the field empty.
 
##### ServerProtectionServiceImpl
org.sakaiproject.nakamura.http.usercontent.ServerProtectionServiceImpl.name = Sakai \
 Nakamura :: Server Protection Service
org.sakaiproject.nakamura.http.usercontent.ServerProtectionServiceImpl.description = \
 Distinguishes application content from untrusted user-uploaded content to prevent cross-site scripting. \
 Blocks POSTs from unknown referers.
untrusted.contenturl.name = Untrusted Content Host
untrusted.contenturl.description = The protocol, domain, and port for streaming untrusted content. \
 This will be the URL of the request as delivered to the application, possibly through a proxy.
untrusted.redirect.host.name = Untrusted Content Redirect Host
untrusted.redirect.host.description = The protocol, domain, and port to which requests for \
 streaming uploaded content will be redirected. This is the redirect URL as sent to the browser. \
 By default it is the same as the Untrusted Content Host.
trusted.hosts.name = Trusted Hosts
trusted.hosts.description = A set of protocol-domain-ports which map to trusted application paths for GET and POST.
trusted.referer.name = Trusted Referers
trusted.referer.description = Referer prefixes that can send POST requests. \
 If the request referer does not start with any of these strings, the request will be rejected.
trusted.paths.name = Trusted Paths
trusted.paths.description = Parent paths of application content which can be streamed from trusted hosts.
trusted.exact.paths.name = Trusted Exact Paths
trusted.exact.paths.description = Exact paths of application content which can be streamed from trusted hosts.
trusted.postwhitelist.name = Trusted POST Whitelist
trusted.postwhitelist.description = Paths which can receive POST requests from any referer and on any host.
trusted.anonpostwhitelist.name = Trusted Anonymous POST Whitelist
trusted.anonpostwhitelist.description = List of paths that accept POST requests without authentication. \
 Other POST requests are denied to anonymous sessions.
trusted.secret.name = Untrusted Content Shared Secret
trusted.secret.description = String used to generate handshake when redirecting requests \
 to stream untrusted content. Should be set to a non-public value in production.
